package Glot.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.references.BLOperations;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class increase_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public increase_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:11c3f7d3-d0d9-47c4-b73e-a51dc42f3abe(Glot.intentions)", "4148086398000091936"));
  }

  @Override
  public String getPresentation() {
    return "increase";
  }

  @Override
  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }

    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "increase subversion";
    }

    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      if (SPropertyOperations.getInteger(node, PROPS.subversion$hpbO) < 9) {
        BLOperations.getAndIncrement_int(SPropertyOperations.intPropRef(node, PROPS.subversion$hpbO));
      }
    }

    @Override
    public boolean isApplicable(final SNode node, final EditorContext editorContext) {
      return true;
    }



    @Override
    public IntentionDescriptor getDescriptor() {
      return increase_Intention.this;
    }

  }

  private static final class PROPS {
    /*package*/ static final SProperty subversion$hpbO = MetaAdapterFactory.getProperty(0x28e4957b85994380L, 0x9a2de36d611c13b9L, 0x1f05a1bb5d897c23L, 0x3990f699fa69d85dL, "subversion");
  }
}
